{
  "version": 3,
  "sources": ["../../../live-reload.js"],
  "sourcesContent": ["let isReco = false;\n\nconsole.log(\"web-bundler live-reload is enabled\");\n\nfunction connectToChanges() {\n    console.debug(\"connecting to web-bundler live-reload: \" + isReco)\n    const eventSource = new EventSource(process.env.LIVE_RELOAD_PATH);\n    eventSource.onopen = () => {\n        if (isReco) {\n            // server is back-on, let's reload to get the latest\n            location.reload();\n        }\n\n        console.debug(\"connected to web-bundler live-reload\");\n    };\n    eventSource.addEventListener('bundling-error', e => {\n        eventSource.close();\n        location.reload();\n    });\n    eventSource.addEventListener('change', e => {\n        if (!e.data) {\n            return;\n        }\n        const {added, removed, updated} = JSON.parse(e.data);\n        const updatedCss = updated.filter(p => p.endsWith(\".css\")).length;\n        if (!added.length && !removed.length && updated.length > 0 && updatedCss === updated.length) {\n            for (const link of document.getElementsByTagName(\"link\")) {\n                const url = new URL(link.href);\n                for (const css of updated)\n                    if (url.host === location.host && url.pathname === css) {\n                        console.log(\"Live-reload: \" + css);\n                        const next = link.cloneNode();\n                        next.href = css + '?' + Math.random().toString(36).slice(2);\n                        next.onload = () => link.remove();\n                        next.onerror = (e) => {\n                            next.remove();\n                            console.error(e);\n                        };\n                        link.parentNode.insertBefore(next, link.nextSibling);\n                        return;\n                    }\n            }\n        }\n        location.reload();\n    });\n\n    eventSource.onerror = (e) => {\n        console.debug(\"web-bundler live-reload connection lost\");\n        isReco = true;\n    };\n}\n\nfetch(process.env.LIVE_RELOAD_PATH)\n    .then(response => {\n        if (response.status === 429) {\n            return Promise.reject(new Error(\"There are too many live-reload open connections.\"));\n        }\n        return response;\n    })\n    .then(connectToChanges)\n    .catch(error => {\n        console.error('Error:', error.message);\n    });\n"],
  "mappings": ";AAAA,IAAI,SAAS;AAEb,QAAQ,IAAI,oCAAoC;AAEhD,SAAS,mBAAmB;AACxB,UAAQ,MAAM,4CAA4C,MAAM;AAChE,QAAM,cAAc,IAAI,YAAY,mBAA4B;AAChE,cAAY,SAAS,MAAM;AACvB,QAAI,QAAQ;AAER,eAAS,OAAO;AAAA,IACpB;AAEA,YAAQ,MAAM,sCAAsC;AAAA,EACxD;AACA,cAAY,iBAAiB,kBAAkB,OAAK;AAChD,gBAAY,MAAM;AAClB,aAAS,OAAO;AAAA,EACpB,CAAC;AACD,cAAY,iBAAiB,UAAU,OAAK;AACxC,QAAI,CAAC,EAAE,MAAM;AACT;AAAA,IACJ;AACA,UAAM,EAAC,OAAO,SAAS,QAAO,IAAI,KAAK,MAAM,EAAE,IAAI;AACnD,UAAM,aAAa,QAAQ,OAAO,OAAK,EAAE,SAAS,MAAM,CAAC,EAAE;AAC3D,QAAI,CAAC,MAAM,UAAU,CAAC,QAAQ,UAAU,QAAQ,SAAS,KAAK,eAAe,QAAQ,QAAQ;AACzF,iBAAW,QAAQ,SAAS,qBAAqB,MAAM,GAAG;AACtD,cAAM,MAAM,IAAI,IAAI,KAAK,IAAI;AAC7B,mBAAW,OAAO;AACd,cAAI,IAAI,SAAS,SAAS,QAAQ,IAAI,aAAa,KAAK;AACpD,oBAAQ,IAAI,kBAAkB,GAAG;AACjC,kBAAM,OAAO,KAAK,UAAU;AAC5B,iBAAK,OAAO,MAAM,MAAM,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC;AAC1D,iBAAK,SAAS,MAAM,KAAK,OAAO;AAChC,iBAAK,UAAU,CAACA,OAAM;AAClB,mBAAK,OAAO;AACZ,sBAAQ,MAAMA,EAAC;AAAA,YACnB;AACA,iBAAK,WAAW,aAAa,MAAM,KAAK,WAAW;AACnD;AAAA,UACJ;AAAA,MACR;AAAA,IACJ;AACA,aAAS,OAAO;AAAA,EACpB,CAAC;AAED,cAAY,UAAU,CAAC,MAAM;AACzB,YAAQ,MAAM,yCAAyC;AACvD,aAAS;AAAA,EACb;AACJ;AAEA,MAAM,mBAA4B,EAC7B,KAAK,cAAY;AACd,MAAI,SAAS,WAAW,KAAK;AACzB,WAAO,QAAQ,OAAO,IAAI,MAAM,kDAAkD,CAAC;AAAA,EACvF;AACA,SAAO;AACX,CAAC,EACA,KAAK,gBAAgB,EACrB,MAAM,WAAS;AACZ,UAAQ,MAAM,UAAU,MAAM,OAAO;AACzC,CAAC;",
  "names": ["e"]
}
