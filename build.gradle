plugins {
    id 'java'
    id 'io.quarkus'
    id("jacoco")
}

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.jacocoTestCoverageVerification {

    violationRules {
        rule {
            element = "CLASS"
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = "0.40".toBigDecimal()
            }
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = "0.45".toBigDecimal()
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(sourceSets.main.output.classesDirs).collect {
            fileTree(dir: it, exclude: [
                    "org/nbody/controllers/**",
                    "org/nbody/services/MQTTService.class"
            ])
        })
    }
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

dependencies {
    implementation 'io.quarkus:quarkus-jacoco'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'org.projectlombok:lombok:1.18.28'
    implementation "io.quarkus:quarkus-smallrye-reactive-messaging-mqtt:3.15.0"
    implementation 'io.quarkus:quarkus-jackson'
    implementation 'io.quarkus:quarkus-scheduler:3.18.0'

    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
}

group 'org.nbody'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
